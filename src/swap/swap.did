type Account = record { owner : principal; subaccount : opt blob };
type CanisterInitData = record {
  custodians : vec principal;
  icp_ledger_canister_id : principal;
  ledger_canister_id : principal;
  sale_royalty : nat64;
};
type GenericValue = variant {
  Nat64Content : nat64;
  Nat32Content : nat32;
  BoolContent : bool;
  Nat8Content : nat8;
  Int64Content : int64;
  IntContent : int;
  NatContent : nat;
  Nat16Content : nat16;
  Int32Content : int32;
  Int8Content : int8;
  FloatContent : float64;
  Int16Content : int16;
  BlobContent : blob;
  NestedContent : Vec;
  Principal : principal;
  TextContent : text;
};
type GetListing = record { listing : Listing; metadata : TokenMetadata };
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  upgrade : opt bool;
  status_code : nat16;
};
type Listing = record {
  expiration_ns : nat64;
  seller : Account;
  icp_price : nat;
};
type NftError = variant {
  UnauthorizedOperator;
  SelfTransfer;
  TokenNotFound;
  UnauthorizedOwner;
  TxNotFound;
  SelfApprove;
  OperatorNotFound;
  ExistedNFT;
  OwnerNotFound;
  Other : text;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok; Err : SwapError };
type Result_1 = variant { Ok : nat; Err : SwapError };
type Result_2 = variant { Ok : opt GetListing; Err : SwapError };
type SwapError = variant {
  Nft : NftError;
  IcrcTransferFrom : TransferFromError;
  NoSuchListing;
  InsufficientAllowance : record { nat; nat };
  InsufficientBalance : record { nat; nat };
  IcrcTransfer : TransferError;
  UnauthorizedCaller;
  ExpirationTooEarly;
  ListingExpired;
  CanisterIsNotOperator;
  AllowanceExpired;
  CanisterCall : record { RejectionCode; text };
};
type TokenMetadata = record {
  transferred_at : opt nat64;
  transferred_by : opt principal;
  owner : opt principal;
  operator : opt principal;
  approved_at : opt nat64;
  approved_by : opt principal;
  properties : vec record { text; GenericValue };
  is_burned : bool;
  token_identifier : nat;
  burned_at : opt nat64;
  burned_by : opt principal;
  minted_at : nat64;
  minted_by : principal;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type Vec = vec record {
  text;
  variant {
    Nat64Content : nat64;
    Nat32Content : nat32;
    BoolContent : bool;
    Nat8Content : nat8;
    Int64Content : int64;
    IntContent : int;
    NatContent : nat;
    Nat16Content : nat16;
    Int32Content : int32;
    Int8Content : int8;
    FloatContent : float64;
    Int16Content : int16;
    BlobContent : blob;
    NestedContent : Vec;
    Principal : principal;
    TextContent : text;
  };
};
service : (CanisterInitData) -> {
  admin_cycles : () -> (nat) query;
  admin_set_custodians : (vec principal) -> ();
  admin_set_ledger_canister : (principal) -> ();
  admin_set_sale_royalty : (nat64) -> ();
  admin_withdraw : (principal, opt blob, nat) -> (Result);
  buy : (nat, opt blob) -> (Result_1);
  get_listing : (nat) -> (Result_2) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  list : (nat, nat, nat64, opt blob) -> (Result);
  unlist : (nat) -> (Result);
}